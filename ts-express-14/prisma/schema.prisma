// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  hashedPassword String
  events         Event[] // Optional: If you want a back-reference
  comments       Comment[] // One user can have multiple comments
  participants   Participant[] // Link to participants

  ownedGroups    Group[]       @relation("AdminGroups") // Groups where the user is an admin
  memberships    GroupMembership[] // Groups where the user is a member
}

model Event {
  id           Int           @id @default(autoincrement())
  name         String
  date         DateTime
  distance     Int?
  ticketPrice  Float?
  location     Address       @relation(fields: [locationId], references: [id])
  locationId   Int
  user         User?         @relation(fields: [userId], references: [id])
  userId       Int?
  // Relations
  comments     Comment[]  
  participants Participant[] // Link to participants
  groupId      Int?          // Optional: If event is for a group
  group        Group?        @relation(fields: [groupId], references: [id])
}

model Address {
  id        Int     @id @default(autoincrement())
  firstLine String
  city      String
  postcode  String
  events    Event[] // Optional: If you want a back-reference
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  // Relations
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int
  user    User? @relation(fields: [userId], references: [id])
  userId  Int?
}

model Participant {
  id      Int   @id @default(autoincrement())
  // Relations
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int
  user    User  @relation(fields: [userId], references: [id])
  userId  Int

  @@unique([eventId, userId]) // Ensures a user can't sign up for the same event twice
}

model Group {
  id           Int              @id @default(autoincrement())
  groupName    String           @unique
  description  String?
  adminId      Int              // User who created the group
  admin        User             @relation("AdminGroups", fields: [adminId], references: [id])
  members      GroupMembership[]
  events       Event[]          // Events restricted to this group
  createdAt    DateTime         @default(now())
}

model GroupMembership {
  id        Int    @id @default(autoincrement())
  groupId   Int
  userId    Int
  status    MembershipStatus @default(PENDING) // PENDING, APPROVED, REJECTED

  group     Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId]) // Ensures a user can't join the same group twice
}

enum MembershipStatus {
  PENDING
  APPROVED
  REJECTED
}